### YamlMime:FAQ
metadata:
  title: FAQ
  titleSuffix: Azure Cognitive Search
  description: Get answers to common questions about Microsoft Azure Cognitive Search service, a cloud hosted search service on Microsoft Azure.
  
  manager: nitinme
  author: HeidiSteen
  ms.author: heidist
  ms.service: cognitive-search
  ms.topic: conceptual
  ms.date: 01/20/2022
    
title: Azure Cognitive Search FAQ
summary:  Find answers to commonly asked questions about concepts, code, and scenarios related to Azure Cognitive Search.


sections:
  - name: General
    questions:
      - question: |
          How do integrate search into my solution?
        answer: |
          Client code should call the client libraries or REST APIs to connect to a search index, formulate queries, and handle responses. You can also write code that builds and refreshes an index, or runs indexers programmatically or by script.

      - question: |
          Is there functional parity across the various APIs?
        answer: |
          Not always. The REST API is always the first to implement new features in preview API versions, and the generally available versions support all programmatic operations. The client libraries in Azure SDKs will pick up new features over time, but are released on their own schedule.

          Although the REST APIs are first out with newest features, the Azure SDKs provide more coding support and are recommended over REST unless a required feature is unavailable.

      - question: |
          Can I pause the service and stop billing?
        answer: |
          You cannot pause a search service. In Azure Cognitive Search, computing resources are allocated when the service is created. It's not possible to release and reclaim those resources on-demand.

      - question: |
          Can I upgrade, downgrade, rename or move the service?
        answer: |
          Service tier, name, and region are fixed for the lifetime of the service.

  - name: Indexing 
    questions:
      - question: |
          Can I move, backup, and restore indexes?
        answer: |
          There is no native support for index management. Search indexes are considered downstream data structures, accepting content from other data sources that collect operational data. As such, there is no built-in support for backing up and restoring indexes because the expectation is that you would rebuild an index from source data if you deleted it or wanted to move it.
          
          However, if you want to move an index between search services, you can try the **index-backup-restore** sample code in this [Azure Cognitive Search .NET sample repo](https://github.com/Azure-Samples/azure-search-dotnet-samples). 
                   
      - question: |
          Can I restore my index or service once it is deleted?
        answer: |
          No, if you delete an Azure Cognitive Search index or service, it cannot be recovered. When you delete a search service, all indexes in the service are deleted permanently.   
                    
      - question: |
          Can I index from SQL Database replicas?
        answer: |
          If you are using the search indexer for Azure SQL Database, there are no restrictions on the use of primary or secondary replicas as a data source when building an index from scratch. However, refreshing an index with incremental updates (based on changed records) requires the primary replica. This requirement comes from SQL Database, which guarantees change tracking on primary replicas only. If you try using secondary replicas for an index refresh workload, there is no guarantee you get all of the data.

  - name: Queries
    questions:         
      - question: |
          Why are there zero matches on terms I know to be valid?
        answer: |
          The most common case is not knowing that each query type supports different search behaviors and levels of linguistic analyses. Full text search, which is the predominant workload, includes a language analysis phase that breaks down terms to root forms. This aspect of query parsing casts a broader net over possible matches, because the tokenized term matches a greater number of variants.
          
          Wildcard, fuzzy and regex queries, however, aren't analyzed like regular term or phrase queries and can lead to poor recall if the query does not match the analyzed form of the word in the search index. For more information on query parsing and analysis, see [query architecture](./search-lucene-query-architecture.md).
          
      - question: |
          Why are my wildcard searches slow?
        answer: |
          Most wildcard search queries, like prefix, fuzzy and regex, are rewritten internally with matching terms in the search index. This extra processing adds to latency. Further, broad search queries, like `a*` for example, that are likely to be rewritten with many terms can be very slow. For performant wildcard searches, consider defining a [custom analyzer](/rest/api/searchservice/custom-analyzers-in-azure-search).

      - question: |
          Can I search across multiple indexes?
        answer: |
          No, a query is always scoped to a single index.
           
      - question: |
          Why is the search score a constant 1.0 for every match?
        answer: |
          Search scores are generated for full text search queries, based on the [statistical properties of matching terms](search-lucene-query-architecture.md#stage-4-scoring), and ordered high to low in the result set. Query types that are not full text search (wildcard, prefix, regex) are not ranked by a relevance score. This behavior is by design. A constant score allow matches found through query expansion to be included in the results, without affecting the ranking.
          
          For example, suppose an input of "tour*" in a wildcard search produces matches on "tours", "tourettes", and "tourmaline". Given the nature of these results, there is no way to reasonably infer which terms are more valuable than others. For this reason, term frequencies are ignored when scoring results in queries of types wildcard, prefix, and regex. Search results based on a partial input are given a constant score to avoid bias towards potentially unexpected matches.

  - name: Security
    questions:
      - question: |
          Where does Cognitive Search store customer data?
        answer: |
          Cognitive Search doesn't store customer data outside of the region in which the service is deployed.

      - question: |
          Does Cognitive Search send customer data to other services for processing?
        answer: |
          Yes, if you use the built-in skills based on Cognitive Services, the indexer sends requests to Cognitive Services over the internal network. If you add a custom skill, the indexer will send content to the URI provided in the custom skill.

      - question: |
          Can I control access to search results based on user identity?
        answer: |
          Typically, users who are authorized to run your application are also authorized to see all search results. Cognitive Search does not have built-in support for row-level or document-level permissions, but you can implement [security filters](./search-security-trimming-for-azure-search.md) as a workaround. 

      - question: |
          Can I control access to operations based on user identity?
        answer: |
          [Role-based authorization](search-security-rbac.md) for data plane operations over content is now in public preview. 

additionalContent: |

  ## Next steps

  If your question isn't answered here, you can refer to the following sources for more questions and answers.
  
     [Stack Overflow: Azure Cognitive Search](https://stackoverflow.com/questions/tagged/azure-search)   
     [How full text search works in Azure Cognitive Search](search-lucene-query-architecture.md)  
     [What is Azure Cognitive Search?](search-what-is-azure-search.md)
